# TODO(kwk): READ THIS https://docs.github.com/en/rest/reference/checks#runs

name: /build-on

on:
  # NOTE(kwk): A regular comment on a PR is the same as an issue comment.
  #            Since we only want PR comments, wee need to filter out
  #            issue comments below.
  issue_comment:
    types:
      - created
      # TODO(kwk): This workflow shall not run when a comment is edited as it might produce confusing results.
      #            But there should be another workflow that runs when a /build-on comment is edited. Then
      #            you might want to immediately update the comment to make it invalid.
      # - edited # Not cool for user interaction

  # TODO(kwk): The "created" type seems to ignore /build-on in review comments, which is why we have this one. But it still does not work.
  # See https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#pull_request_review_comment      
  pull_request_review_comment:
    types:
      - created
  pull_request_review:
    types:
      - submitted    
    
jobs:

  # This is the quick gatekeeper for this workflow.
  # Unless a comment starts with /build-on, we abort immediately. 
  gatekeeper:
    name: "Skip unless /build-on prefix is found"
    runs-on: ubuntu-latest
    # Only run on PR comment and not on issue comment (see https://github.community/t/triggering-workflow-only-for-pull-request-comment/17156)
    # TODO(kwk): Fail gracefully if this step does not pass. IMPORTANT! Done by second startsWith if-clause?
    if: >-
      contains(github.event.comment.html_url, '/pull/') &&
      startsWith(github.event.comment.body, '/build-on ')
    steps:
      - name: Check comment
        id: checkcomment
        run: echo ${{ github.event.comment.body }} | grep '^/build-on '
        # TODO(kwk): Support other flavors /must-build-on or /try-build-on ?
  
  workflow-starts:
      name: Workflow starts
      needs: gatekeeper
      runs-on: ubuntu-latest
      steps:
      - name: Create a workflow-started comment
        id:   build_log
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.BOT_PAT}}
          script: |
            async function add_issue_comment(github, issue_node_id, comment_body) {
                
                const query = `mutation($issue_node_id:String!, $comment_body:String!) {
                    addComment(input: {
                        subjectId: $issue_node_id, 
                        body: $comment_body
                    }) {
                        commentEdge {
                            node {
                                id
                            }
                        }
                    }
                }`;

                const variables = {
                    issue_node_id: issue_node_id,
                    comment_body: comment_body,
                }
                
                const result = await github.graphql(query, variables);
                return result.addComment.commentEdge.node.id;
            }

            body = `<details>
            <summary><a href="https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }}">Workflow</a> started: ${{ github.event.comment.body }}</summary>
            <p>
            @${{ github.actor }}, <a href="${{ github.event.comment.html_url }}">your comment</a>:
            
            <blockquote>${{ github.event.comment.body }}</blockquote>

            kicked-off the <a href="https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }}"><code>${{ github.workflow }}</code></a> Github workflow.

            This comment will be re-used for further updates.

            :bulb: <u>TIP:</u> Did you know that you can run more than one build at a time by creating another buildrequest comment?
            </p>
            </details>`;
            comment_id = add_issue_comment(github, '${{ github.event.issue.node_id }}', body);

            return {'comment_id': comment_id, 'body': body}
          # result-encoding: json
      - name: Create build log comment node_id artifact
        run: |
              echo "${{steps.build_log.outputs.result.body}}" > build_log_comment_body.txt
              echo "${{steps.build_log.outputs.result.comment_id}}" > build_log_comment_node_id.txt
      - uses: actions/upload-artifact@v2
        name: Upload build log comment node_id for consumption in other jobs
        with:
          name: build-log-comment-node-id
          path: build_log_comment_node_id.txt
      - uses: actions/upload-artifact@v2
        name: Upload build log comment body for consumption in other jobs
        with:
          name: build-log-comment-body
          path: build_log_comment_body.txt

  call-try-builder:
    name: "Verify parameters and kick off build"
    needs: workflow-starts
    # We need to run this on a self-hosted github actions-runner because
    # the buildbot master in the test setup is not publically reachable.
    runs-on: [self-hosted]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-log-comment-node-id
      - name: Set job variables
        id: vars
        # For the "::set-output" part, see
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
        run: |
          echo "::set-output name=builder-name::`echo ${{ github.event.comment.body }} | cut -d ' ' -f 2 | tr -d ' '`"
          echo "::set-output name=pr-node-id::`echo ${{ github.event.issue.node_id }}`"
          echo "::set-output name=build-log-comment-node-id::`cat build_log_comment_node_id.txt`"

      # See https://github.com/actions/github-script#run-custom-graphql-queries
      # See https://docs.github.com/en/graphql/guides/forming-calls-with-graphql
      # See https://docs.github.com/en/graphql/overview/explorer

      # Checkout pull request HEAD commit instead of merge commit
      # TODO(kwk): Checkout code at this early step is not necessary if we keep our actions separated.
      # https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
      - name: Checkout pull request HEAD
        id: checkout_pr_head
        uses: actions/checkout@v2
        with:
          #ref: origin/main
          # TODO(kwk): Fetching all history seems to be an overkill?
          # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
          fetch-depth: 1
          repository: ${{ github.repository }}

      # Get a list of available builders from
      # The list of builders returned from buildbot is prefixed with these two lines:
      #
      #  using 'pb' connect method
      #  The following builders are available for the try scheduler:
      # 
      # Then the results are separated by \n\n which we remove and replace with a comma.
      # TODO(kwk): What happens, if a builder contains a comman in it's name?
      # TODO(kwk): Removing the newlines seems silly (is it needed because otherwise you'd only see one trybuilder?)
      - name: Get try-builder list
        id: gettrybuilders
        shell: bash
        run: |
          echo "::set-output name=namelist::`for i in $(buildbot try \
            --master master:8031 \
            --passwd='${{ secrets.TRY_PASSWORD }}' \
            --username='${{ secrets.TRY_USER }}' \
            --connect='pb' \
            --get-builder-names \
            | sed '1,/The following builders are available for the try scheduler:/d' \
            | tr -d '\r'); do echo "<li>$i</li>"; done \
            | tr -d '\n'`"
    
      - name: Write comment about unknown try-builder
        uses: actions/github-script@v3
        if: |
          !contains(steps.gettrybuilders.outputs.namelist, steps.vars.outputs.builder-name)
        with:
          # GitHub provides a token that you can use to authenticate on behalf of GitHub Actions.
          # See https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
          github-token: ${{secrets.BOT_PAT}}
          debug: true
          script: |
            // Wrapper function that prepends the given ID to the message as a comment before
            // creating the comment.
            async function createComment(pullRequestNumber, id, message) {
              const body = `<!-- #${id} -->\n\n${message}`
              await github.issues.createComment({
                ...context.repo,
                issue_number: pullRequestNumber,
                body
              })
            }

            const message = `
            <details>
            <summary>Unknown builder: ${{ github.event.comment.body }}</summary>
            <p>
            Sorry but, there's no try builder called <code>${{steps.vars.outputs.builder-name}}</code>. You can only choose from these try builders:
              <ul>
                ${{ steps.gettrybuilders.outputs.namelist }}
              </ul>
              </p>
            </details>`
            core.info(message)
            await createComment(context.issue.number, 'trybuilder-unknown', message)
      
      # - name: Fetch necessary branches
      #   if: startswith(github.event.comment.body, 'cherry-pick:')
      #   run: |
      #     git fetch origin master
      #     if git ls-remote --exit-code -h https://github.com/${{ github.repository }} ${{ steps.vars.outputs.pr-head-branch }}; then
      #       git fetch https://github.com/${{ github.repository }} ${{ steps.vars.outputs.pr-head-branch }}:${{ steps.vars.outputs.pr-head-branch }}
      #       git checkout ${{ steps.vars.outputs.pr-head-branch }}
      #     fi


      # # Checkout pull request HEAD commit instead of merge commit
      # # https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
      # - name: Checkout pull request HEAD
      #   id: checkout_pr_head
      #   uses: actions/checkout@v2
      #   if: contains(steps.gettrybuilders.outputs.namelist, steps.vars.outputs.builder-name)
      #   with:
      #     #ref: origin/main
      #     # TODO(kwk): Fetching all history seems to be an overkill
      #     # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
      #     fetch-depth: 1
      #     repository: kwk/llvm-ci
      
      - name: Kick off try-build
        id: kick_off_try_builder
        if: contains(steps.gettrybuilders.outputs.namelist, steps.vars.outputs.builder-name)
        shell: bash
        run: |
          git fetch origin pull/${{ github.event.issue.number }}/head:pr-${{ github.event.issue.number }}

          # Ensure Bash pipelines (e.g. cmd | othercmd) return a non-zero status if any of
          # the commands fail, rather than returning the exit status of the last command
          # in the pipeline.
          set -o pipefail

          # Copy event.json locally for further inspection
          # TODO(kwk): Remove if not needed (currently only needed for debugging and inspecting fields)
          cp -v ${{github.event_path}} .

          git diff HEAD..pr-${{ github.event.issue.number }} > mydiff

          #--branch="pull/${{ github.event.issue.number }}/head" \
          
          # --baserev="origin/main" \
          # ^ Results in: fatal: invalid object name 'origin'.

          # See this page for getting a description about the values I'm filling in for the build properties:
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#github-context
          # https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#comments
          buildbot try \
            --master master:8031 \
            --builder='${{steps.vars.outputs.builder-name}}' \
            --passwd='${{ secrets.TRY_PASSWORD }}' \
            --username='${{ secrets.TRY_USER }}' \
            --connect='pb' \
            --vc="git" \
            --baserev="`git rev-parse HEAD`" \
            --comment='TODO(kwk): Come up with a better comment but try to do something with a UUID for followup comments ;)' \
            --who='${{ github.actor }}' \
            --repository='${{ github.repository }}' \
            --property=project='${{ github.repository }}' \
            --property=repository='https://github.com/${{ github.repository }}.git' \
            --property=github_action='${{ github.action }}' \
            --property=github_actor='${{ github.actor }}' \
            --property=github_event_name='${{ github.event_name }}' \
            --property=github_event_path='${{ github.event_path }}' \
            --property=github_head_ref='${{ github.head_ref }}' \
            --property=github_job='${{ github.job }}' \
            --property=github_ref='${{ github.ref }}' \
            --property=github_repository='${{ github.repository }}' \
            --property=github_repository_owner='${{ github.repository_owner }}' \
            --property=github_run_id='${{ github.run_id }}' \
            --property=github_run_number='${{ github.run_number }}' \
            --property=github_sha='${{ github.sha }}' \
            --property=github_workflow='${{ github.workflow }}' \
            --property=github_workspace='${{ github.workspace }}' \
            --property=_github_trigger_comment_html_url='${{ github.event.comment.html_url }}' \
            --property=_github_trigger_comment_url='${{ github.event.comment.url }}' \
            --property=_github_trigger_comment_id='${{ github.event.comment.id }}' \
            --property=_github_trigger_comment_node_id='${{ github.event.comment.node_id }}' \
            --property=_github_trigger_comment_body='${{ github.event.comment.body }}' \
            --property=_github_pr_number='${{ github.event.issue.number }}' \
            --property=_github_issue_number='${{ github.event.issue.number }}' \
            --property=_github_pr_html_url='${{ github.event.issue.html_url }}' \
            --property=_github_build_log_comment_node_id='${{steps.vars.outputs.build-log-comment-node-id}}' \
            --diff mydiff

      # Updates the build log comment and returns the last edited at time
      - name: Update the workflow-started comment
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.BOT_PAT}}
          script: |
            const update_issue_comment = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/js/update_issue_comment.js`);
            return update_issue_comment(github, '${{steps.vars.outputs.build-log-comment-node-id}}',
            `<details>
            <summary>Handed over to buildbot: ${{ github.event.comment.body }}</summary>
            <p>
            @${{github.actor}}, your <a href="${{ github.event.comment.html_url }}">build request</a>:

            <blockquote>${{ github.event.comment.body }}</blockquote>

            has been handed over to buildbot.

            Once buildbot starts your build, it will update this comment
            and include a link to the logs for you to follow.
            </p>
            </details>`);
          result-encoding: string

      # Updates the build log comment and returns the last edited at time
      - name: Create or update comment
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.BOT_PAT}}
          script: |
            const append_to_issue_comment = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/js/update_build_log.js`);
            return (github, repo_owner, repo_name, issue_number, comment_id, summary, body)
            append_to_issue_comment(github, context.repo.owner, context.repo.repo, "foobar",
              "Howdy, here I am",
              "This is the message body");

            append_to_issue_comment(github, context.repo.owner, context.repo.repo, "foobar",
              "Howdy, here I am Second time around",
              "This is another message body");

  # buildbot try \
  #   --master master:8031 \
  #   --passwd='${{ secrets.TRY_PASSWORD }}' \
  #   --username='${{ secrets.TRY_USER }}' \
  #   --connect='pb' \
  #   --vc="git" \
  #   --baserev='${{ GITHUB_BASE_REF }}' \
  #   --comment='TODO(kwk): Come up with a better comment but try to do something with a UUID for followup comments ;)' \
  #   --who='${{ github.event.pull_request.user.login }}' \
  #   --property=github-action='${{ github.action }}' \
  #   --property=github-actor='${{ github.actor }}' \
  #   --property=github-event_name='${{ github.event_name }}' \
  #   --property=github-event_path='${{ github.event_path }}' \
  #   --property=github-head_ref='${{ github.head_ref }}' \
  #   --property=github-job='${{ github.job }}' \
  #   --property=github-ref='${{ github.ref }}' \
  #   --property=github-repository='${{ github.repository }}' \
  #   --property=github-repository_owner='${{ github.repository_owner }}' \
  #   --property=github-run_id='${{ github.run_id }}' \
  #   --property=github-run_number='${{ github.run_number }}' \
  #   --property=github-sha='${{ github.sha }}' \
  #   --property=github-workflow='${{ github.workflow }}' \
  #   --property=github-workspace='${{ github.workspace }}' \
  #   --repository='${{ github.repository }}'

  # try-build:
  #   needs: check-if-builder-exists
  #   # We need to run this on a self-hosted github actions-runner because
  #   # the buildbot master in the test setup is not publically reachable.
  #   runs-on: [self-hosted]
  #   steps:
  #     - name: Checkout Pull Request
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - name: Build using buildbot try
  #       run: |
  #         buildbot try \
  #           --master master:8031 \
  #           --passwd="${{ secrets.TRY_PASSWORD }}" \
  #           --username="${{ secrets.TRY_USER }}" \
  #           --connect="pb" \
  #           --vc="git" \
  #           --builder="${{ steps.vars.outputs.builder-name }}" \
  #           --baserev="main" \
  #           --branch="main" \
  #           --repository="${{ github.repository }}"
      # - name: Summary
      #   if: ${{ always() }}
      #   # For grouping see:
      #   # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#grouping-log-lines
      #   run: |
      #     echo "::group::{Summary}"
      #     echo "You've scheduled a build on ${{ steps.vars.outputs.builder-name }}"
      #     echo "::endgroup::"
      # # - name: Checkout code master code
      # #   if: startswith(github.event.comment.body, '/build-on ') 
      # #   uses: actions/checkout@v2
      # #   with:
      # #     fetch-depth: 0
      # #     # Repository name with owner. For example, actions/checkout
      # #     # Default: ${{ github.repository }}
      # #     repository: kwk/llvm-ci-demo
      # #     ref: ${{ steps.vars.outputs.pr-base-branch }}

  #     - name: Build using buildbot try
  #       run: |
  #         buildbot try \
  #           --master master:8031 \
  #           --passwd="${{ secrets.TRY_PASSWORD }}" \
  #           --username="${{ secrets.TRY_USER }}" \
  #           --connect="pb" \
  #           --vc="git" \
  #           --builder="${{ steps.vars.outputs.builder-name }}" \
  #           --baserev="main" \
  #           --branch="main" \
  #           --repository="${{ github.repository }}"
  #     - name: Summary
  #       if: ${{ always() }}
  #       # For grouping see:
  #       # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#grouping-log-lines
  #       run: |
  #         echo "::group::{Summary}"
  #         echo "You've scheduled a build on ${{ steps.vars.outputs.builder-name }}"
  #         echo "::endgroup::"
  #     # - name: Checkout code master code
  #     #   if: startswith(github.event.comment.body, '/build-on ') 
  #     #   uses: actions/checkout@v2
  #     #   with:
  #     #     fetch-depth: 0
  #     #     # Repository name with owner. For example, actions/checkout
  #     #     # Default: ${{ github.repository }}
  #     #     repository: kwk/llvm-ci-demo
  #     #     ref: ${{ steps.vars.outputs.pr-base-branch }}      