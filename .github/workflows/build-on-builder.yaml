# TODO(kwk): READ THIS https://docs.github.com/en/rest/reference/checks#runs
# TODO(kwk): Upon workflow cancellation, cancel the buildbot build as well if available
#            (see http://docs.buildbot.net/current/developer/raml/buildrequest.html#endpoints)
# TODO(kwk): HTTP Endpoint for controlling Buildbot: http://docs.buildbot.net/current/developer/rest.html#controlling 

name: /build-on

on:
  # NOTE(kwk): A regular comment on a PR is the same as an issue comment.
  #            Since we only want PR comments, wee need to filter out
  #            issue comments below.
  issue_comment:
    types:
      - created
      # TODO(kwk): This workflow shall not run when a comment is edited as it might produce confusing results.
      #            But there should be another workflow that runs when a /build-on comment is edited. Then
      #            you might want to immediately update the comment to make it invalid.
      # - edited # Not cool for user interaction

  # TODO(kwk): The "created" type seems to ignore /build-on in review comments, which is why we have this one. But it still does not work.
  # See https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#pull_request_review_comment      
  pull_request_review_comment:
    types:
      - created
  pull_request_review:
    types:
      - submitted    
    
jobs:

  # This is the quick gatekeeper for this workflow.
  # Unless a comment starts with /build-on, we abort immediately. 
  gatekeeper:
    name: "Skip unless /build-on prefix is found"
    runs-on: ubuntu-latest
    # Only run on PR comment and not on issue comment (see https://github.community/t/triggering-workflow-only-for-pull-request-comment/17156)
    # TODO(kwk): Fail gracefully if this step does not pass. IMPORTANT! Done by second startsWith if-clause?
    # TODO(kwk): Respect this NOTE: https://docs.github.com/en/rest/reference/issues#get-an-issue
    if: >-
      contains(github.event.comment.html_url, '/pull/') &&
      startsWith(github.event.comment.body, '/build-on ')
    steps:
      - name: Check comment
        id: checkcomment
        run: echo ${{ github.event.comment.body }} | grep '^/build-on '
        # TODO(kwk): Support other flavors /must-build-on or /try-build-on ?

  call-try-builder:
    name: "Verify parameters and kick off build"
    needs: gatekeeper
    # We need to run this on a self-hosted github actions-runner because
    # the buildbot master in the test setup is not publically reachable.
    runs-on: [self-hosted]
    steps:
      - name: Set job variables
        id: vars
        # For the "::set-output" part, see
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
        run: |
          echo "::set-output name=builder-name::`echo ${{ github.event.comment.body }} | cut -d ' ' -f 2 | tr -d ' '`"
          echo "::set-output name=pr-node-id::`echo ${{ github.event.issue.node_id }}`"

      # See https://github.com/actions/github-script#run-custom-graphql-queries
      # See https://docs.github.com/en/graphql/guides/forming-calls-with-graphql
      # See https://docs.github.com/en/graphql/overview/explorer

      # Checkout pull request HEAD commit instead of merge commit
      # TODO(kwk): Checkout code at this early step is not necessary if we keep our actions separated.
      # https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
      - name: Checkout pull request HEAD
        id: checkout_pr_head
        uses: actions/checkout@v2
        with:
          #ref: origin/main
          # TODO(kwk): Fetching all history seems to be an overkill?
          # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
          fetch-depth: 1
          repository: ${{ github.repository }}

      - name: Start build log comment
        id: build_log
        uses: actions/github-script@v3
        with: 
          github-token: ${{secrets.BOT_PAT}}
          debug: true
          script: |
            const update_build_log = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/js/update_build_log.js`);
          
            buildLogComment = await update_build_log({
              github:  github,
              context: context,
              core:    core,
              summary: `Kicked-off the Github workflow: <a href="https://github.com/${{github.repository}}/actions/runs/${{ github.run_id }}"><code>${{ github.workflow }}</code></a>`,
            });
            console.log(buildLogComment.data.id);

      - name: Check if builder is known
        if: |
          !contains(steps.gettrybuilders.outputs.namelist, steps.vars.outputs.builder-name)
        uses: actions/github-script@v3
        with:
          # GitHub provides a token that you can use to authenticate on behalf of GitHub Actions.
          # See https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
          github-token: ${{secrets.BOT_PAT}}
          debug: true
          script: |
            // For request method, see https://github.com/octokit/request.js
            console.log(`request.defaults() = ` + JSON.stringify(request.defaults(), null, 2));

            builders = await github.request('https://reverse-proxy:8443/api/v2/builders?field=name');
            foundBuilder = False;
            var buildersList = '';
            for (let i of builders) {
              buildersList += '<li>' + i + '</li>';
              // TODO(kwk): Sanitize user-input? To not allow code injection.
              if (i == '${{steps.vars.outputs.builder-name}}') {
                foundBuilder = True
              }
            }

            if (foundBuilder) {
              return
            }

            const update_build_log = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/js/update_build_log.js`);
          
            buildLogComment = await update_build_log({
              github:  github,
              context: context,
              core:    core,
              summary: `Unknown builder: <code>${{steps.vars.outputs.builder-name}}</code>`,
              details: `Sorry but, there's no builder called <code>${{steps.vars.outputs.builder-name}}</code>.
                You can choose from these builders:
                <ul>
                  `+buildersList+`
                </ul>`,
              build_log_comment_id: `${{ steps.build_log.outputs.result }}`,
            });

            core.setFailed('Unknown builder: ${{steps.vars.outputs.builder-name}}');
      
      - name: Kick off try-build
        id: kick_off_try_builder
        # if: contains(steps.gettrybuilders.outputs.namelist, steps.vars.outputs.builder-name)
        shell: bash
        run: |
          git fetch origin pull/${{ github.event.issue.number }}/head:pr-${{ github.event.issue.number }}

          # Ensure Bash pipelines (e.g. cmd | othercmd) return a non-zero status if any of
          # the commands fail, rather than returning the exit status of the last command
          # in the pipeline.
          set -o pipefail

          # Copy event.json locally for further inspection
          # TODO(kwk): Remove if not needed (currently only needed for debugging and inspecting fields)
          cp -v ${{github.event_path}} .

          git diff HEAD..pr-${{ github.event.issue.number }} > mydiff

          #--branch="pull/${{ github.event.issue.number }}/head" \
          
          # --baserev="origin/main" \
          # ^ Results in: fatal: invalid object name 'origin'.

          # See this page for getting a description about the values I'm filling in for the build properties:
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#github-context
          # https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#comments
          buildbot try \
            --master master:8031 \  
            --builder='${{steps.vars.outputs.builder-name}}' \
            --passwd='${{ secrets.TRY_PASSWORD }}' \
            --username='${{ secrets.TRY_USER }}' \
            --connect='pb' \
            --vc="git" \
            --patchlevel=1 \
            --baserev="`git rev-parse HEAD`" \
            --comment='TODO(kwk): Come up with a better comment but try to do something with a UUID for followup comments ;)' \
            --who='${{ github.actor }}' \
            --repository='${{ github.repository }}' \
            --property=project='${{ github.repository }}' \
            --property=repository='https://github.com/${{ github.repository }}.git' \
            --property=github_action='${{ github.action }}' \
            --property=github_actor='${{ github.actor }}' \
            --property=github_event_name='${{ github.event_name }}' \
            --property=github_event_path='${{ github.event_path }}' \
            --property=github_head_ref='${{ github.head_ref }}' \
            --property=github_job='${{ github.job }}' \
            --property=github_ref='${{ github.ref }}' \
            --property=github_repository='${{ github.repository }}' \
            --property=github_repository_owner='${{ github.repository_owner }}' \
            --property=github_run_id='${{ github.run_id }}' \
            --property=github_run_number='${{ github.run_number }}' \
            --property=github_sha='${{ github.sha }}' \
            --property=github_workflow='${{ github.workflow }}' \
            --property=github_workspace='${{ github.workspace }}' \
            --property=_github_trigger_comment_html_url='${{ github.event.comment.html_url }}' \
            --property=_github_trigger_comment_url='${{ github.event.comment.url }}' \
            --property=_github_trigger_comment_id='${{ github.event.comment.id }}' \
            --property=_github_trigger_comment_node_id='${{ github.event.comment.node_id }}' \
            --property=_github_trigger_comment_body='${{ github.event.comment.body }}' \
            --property=_github_pr_number='${{ github.event.issue.number }}' \
            --property=_github_issue_number='${{ github.event.issue.number }}' \
            --property=_github_pr_html_url='${{ github.event.issue.html_url }}' \
            --property=_github_build_log_comment_node_id='${{steps.vars.outputs.build-log-comment-node-id}}' \
            --diff mydiff

      - name: Update build log
        # if: |
        #   !contains(steps.gettrybuilders.outputs.namelist, steps.vars.outputs.builder-name)
        uses: actions/github-script@v3
        with:
          # GitHub provides a token that you can use to authenticate on behalf of GitHub Actions.
          # See https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
          github-token: ${{secrets.BOT_PAT}}
          debug: true
          script: |
            const update_build_log = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/js/update_build_log.js`);
          
            buildLogComment = await update_build_log({
              github:  github,
              context: context,
              core:    core,
              summary: `Handed request over to buildbot`,
              details: `Once buildbot starts your build, it will append to this comment and include a link to the logs for you to follow.`,
              build_log_comment_id: `${{ steps.build_log.outputs.result }}`,
            });      