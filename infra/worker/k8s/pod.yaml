apiVersion: v1
kind: Pod
metadata:
  name: worker-pod
  labels:
    os: "fedora"
    os_version: "33"
    arch: "x86_64"
    app: "buildbot"
    tier: "worker"
    # Add your own key-value pairs
    ccache: "yes"
spec:
  containers:
    - name: worker-container
      image: "${WORKER_IMAGE}"
      # See https://docs.openshift.com/enterprise/3.2/dev_guide/compute_resources.html#quality-of-service-tiers
      # QoS Tier:
      #   # A Guaranteed CPU container is guaranteed to get the amount requested
      #   # and no more, even if there are additional CPU cycles available. This
      #   # provides a consistent level of performance independent of other
      #   # activity on the node.
      #   cpu:  "Guaranteed"
      #   # A Burstable memory container is scheduled on the node to get the
      #   # amount of memory requested, but it may consume more. If there is an
      #   # out of memory event on the node, Burstable containers are killed after
      #   # BestEffort containers when attempting to recover memory.
      #   memory: "Burstable"
      # resources:
      #   requests:
      #     # Memory is measured in bytes. In addition, it may be used with SI
      #     # suffices (E, P, T, G, M, K) or their power-of-two-equivalents
      #     # (Ei, Pi, Ti, Gi, Mi, Ki).
      #     memory: "8Gi"
      #     # CPU is measured in units called millicores. Each node in a cluster
      #     # inspects the operating system to determine the amount of CPU cores
      #     # on the node, then multiplies that value by 1000 to express its total
      #     # capacity. For example, if a node has 2 cores, the nodeâ€™s CPU
      #     # capacity would be represented as 2000m. If you wanted to use 1/10 of
      #     # a single core, it would be represented as 100m.
      #     # (see https://docs.openshift.com/enterprise/3.2/dev_guide/compute_resources.html#dev-compute-resources)
      #     cpu: "10000m"
      #   limits:
      #     memory: "16Gi" # e.g. 64 Gigabytes = 64 Gi
      #     cpu: "10000m" # e.g. 32 cores = 32000m
      resources:
        limits:
          memory: "3Gi" # e.g. 64 Gigabytes = 64 Gi
          cpu: "10000m" # e.g. 32 cores = 32000m
      ports:
        - containerPort: 9989
          name: worker
      env:
        ########################################################################
        # BUILDBOT SPECIFICS
        #
        # NOTE: The whole CMake configuration is done in the llvm-zorg reporitory.
        #       Here's a commit which adds my first builder and slave/worker:
        # https://github.com/llvm/llvm-zorg/commit/d5933da06ce30de8cfec8ea57f8ecce0d094cb9c
        ########################################################################
        - name: BUILDBOT_WORKER_NAME
          value: "fedora-llvm-x86_64"
        - name: BUILDBOT_INFO_ADMIN
          value: "Konrad Kleine <kkleine@redhat.com>"
        - name: BUILDBOT_ACCESS_URI
          value: "${BUILDBOT_ACCESS_URI}"
        - name: BUILDBOT_MASTER
          value: "${BUILDBOT_MASTER}"
      volumeMounts:
        - name: buildbot-worker-secret-volume
          mountPath: /secret-volume
          readOnly: true
  volumes:
    - name: buildbot-worker-secret-volume
      secret:
        secretName: buildbot-worker-secret