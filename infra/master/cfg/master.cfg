# -*- python -*-
# ex: set filetype=python:

import os
import re
import json
from pathlib import Path
from buildbot.plugins import *
from buildbot.plugins import util, steps, schedulers, reporters, secrets
from twisted.internet import defer
from buildbot.process.properties import Interpolate
from buildbot.reporters.generators.build import BuildStartEndStatusGenerator
from buildbot.reporters.generators.build import BuildStatusGenerator
from buildbot.reporters.message import MessageFormatterRenderable
from buildbot.reporters.github import GitHubCommentPush
from buildbot.www import auth, authz

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

####### SECRETS

# First we declare that the secrets are stored in a directory of the filesystem
# each file contain one secret identified by the filename
# http://docs.buildbot.net/latest/manual/secretsmanagement.html#secret
# c['secretsProviders'] = [secrets.SecretInAFile(dirname="/secret-volume/")]
github_pat_write_discussion = Path('/secret-volume/github-pat').read_text()
# TODO(kwk): try to mount secrets with docker-compose to make them usable here?

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

# NOTE(kwk): For ease of use let's configure ten workers upfront with all the same passwords.
c['workers'] = [
    worker.Worker('worker0', 'password'),
    worker.Worker('worker1', 'password'),
    worker.Worker('worker2', 'password'),
    worker.Worker('worker3', 'password'),
    worker.Worker('worker4', 'password'),
    worker.Worker('worker5', 'password'),
    worker.Worker('worker6', 'password'),
    worker.Worker('worker7', 'password'),
    worker.Worker('worker8', 'password'),
    worker.Worker('worker9', 'password'),
]

all_worker_names = ['worker0', 'worker1', 'worker2', 'worker3', 'worker4', 'worker5', 'worker6', 'worker7', 'worker8', 'worker9']

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': int(os.environ.get('BUILDBOT_MASTER_PORT', 9989))}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a CMake hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/kwk/llvm-ci.git',
        workdir='gitpoller-workdir', branch='main',
        pollInterval=300))
 
####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []

# It follows exactly one branch, and starts a configurable tree-stable-timer after each change
# on that branch. When the timer expires, it starts a build on some set of Builders.
# https://docs.buildbot.net/latest/manual/configuration/schedulers.html#singlebranchscheduler
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#                             name="single-branch-scheduler",
#                             change_filter=util.ChangeFilter(branch='main'),
#                             treeStableTimer=None,
#                             builderNames=['builder1', 'builder2']))

# The ForceScheduler scheduler is the way you can configure a force build form in the web UI.
# https://docs.buildbot.net/latest/manual/configuration/schedulers.html#forcescheduler-scheduler
# c['schedulers'].append(schedulers.ForceScheduler(
#                             name="force-scheduler",
#                             builderNames=['builder1', 'builder2']))


@util.renderer
def builderNames(props):
    builders = set()
    # for f in props.files:
    #     if f.endswith('.rst'):
    #         builders.add('check_docs')
    #     if f.endswith('.c'):
    #         builders.add('check_code')

    # TODO(kwk): Based on properties, we could determine exactly which builders to use?
    # TODO(kwk): We could even build on more than one builder if we want.
    builders.add('trybuilder0')
    return list(builders)

# This scheduler allows developers to use the buildbot try command to trigger builds of
# code they have not yet committed.
# https://docs.buildbot.net/current/manual/configuration/schedulers.html#try-schedulers
# https://docs.buildbot.net/current/manual/configuration/schedulers.html#configuring-schedulers
c['schedulers'].append(schedulers.Try_Userpass(name="try-scheduler",
                            # This is the set of builders which this scheduler should trigger.
                            # If you list more than one here, you will have more than one builds.
                            
                            # WARNING(kwk): With "buildbot-try --get-builder-names" this errors in: builtins.TypeError: 'Unpersistable' object is not iterable
                            # builderNames=builderNames,
                            builderNames=['trybuilder0'],
                            port=int(os.environ.get('BUILDBOT_MASTER_TRY_PORT', 8031)),
                            userpass=[
                                ("alice-try","password"),
                                ("bob-try", "password"),
                            ]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(
    repourl='git://github.com/kwk/llvm-ci.git',
    mode='incremental',
    ))

factory.addStep(steps.ShellCommand(
    command=["mkdir", "-pv", "build"],
    ))
factory.addStep(steps.ShellCommand(command=["cd", "build"]))
# factory.addStep(steps.CMake(
#     path='../llvm-ci',
#     generator='Ninja',
#     # A dictionary that contains parameters that will be converted to -D{name}={value} when passed to CMake.
#     # A renderable which renders to a dictionary can also be provided, see Properties. 
#     # # http://docs.buildbot.net/latest/manual/configuration/properties.html#properties
#     # http://docs.buildbot.net/latest/manual/configuration/properties.html#using-properties-in-steps
#     definitions={
#         'CMAKE_BUILD_TYPE': util.Property('BUILD_TYPE', default='Release'),
#     },
#     # A list or a tuple that contains options that will be passed to CMake as is.
#     options=[
#         '-Wno-dev'
#     ]
# )

tryfactory = util.BuildFactory()

# http://docs.buildbot.net/current/manual/configuration/steps/http_step.html
# see https://docs.github.com/en/rest/reference/issues#create-an-issue-comment
tryfactory.addStep(
    steps.POSTNewStyle(
        # TODO(kwk): Replace hardcoded 46 with a real PR/issue number
        url = util.Interpolate('https://api.github.com/repos/%(prop:github-repository)s/issues/%(prop:github-pr-number)s/comments'),
        headers = {
            'Authorization':  'token ' + github_pat_write_discussion,
        },
        # Hide the Authorization token from the request log
        hide_request_headers = ['Authorization'],
        data = util.Interpolate('''
            {"body":"@%(prop:github-actor)s, we're working on your build request from [this comment](%(prop:github-comment-html_url)s).<br/>"}
        ''')
            # """
            # {
            #     'body': "<!-- build-started %(prop:github-comment-node_id)s -->",
            #         "@%(prop:github-actor)s, we\'re working on your build request from [this comment](%(prop:github-comment-html_url)s).<br/>",
            #         "You can follow the logs here: [here](http://localhost:8010/#/builders/%(prop:builderid)s/builds/%(prop:buildnumber)s).<br/>",
            #         "Builder: %(prop:buildername)s<br/>",
            #         "Builder Number:%(prop:buildernumber)s<br/>",
            #         "Worker Name:%(prop:workername)s<br/>",
            #         "Revision:%(prop:revision)s"
            # }
            # """
    )
)

# tryfactory.addStep(steps.Git(
#     repourl='git://github.com/kwk/llvm-ci.git',
#     mode='incremental',
#     # Common parameters for all steps: http://docs.buildbot.net/latest/manual/configuration/steps/common.html
#     name='Checkout the source code',
#     # Common parameters for all source checkout steps: https://docs.buildbot.net/latest/manual/configuration/steps/source_common.html
#     # repository='kwk/llvm-ci',
#     ))

# # For exposing properties see https://docs.buildbot.net/latest/manual/configuration/properties.html#properties
# tryfactory.addStep(steps.ShellCommand(command=['echo', 'buildername:', util.Property('buildername', default='n/a')]))
# tryfactory.addStep(steps.ShellCommand(command=['echo', 'repository:', util.Property('repository', default='n/a')]))
# tryfactory.addStep(steps.ShellCommand(command=['echo', 'codebase:', util.Property('codebase', default='n/a')]))

# tryfactory.addStep(steps.ShellCommand(command=["ls"]))
# tryfactory.addStep(steps.ShellCommand(command=["pwd"]))
# tryfactory.addStep(steps.ShellCommand(command=["env"]))

# Define two normal builders and one try builder.

c['builders'] = []
# c['builders'].append(util.BuilderConfig(
#         name="builder1",
#         workernames=all_worker_names,
#         factory=factory))
# c['builders'].append(util.BuilderConfig(
#       name="builder2",
#       workernames=all_worker_names,
#       factory=factory))
c['builders'].append(util.BuilderConfig(
      name="trybuilder0",
      workernames=['worker0'],
      factory=tryfactory))
# c['builders'].append(util.BuilderConfig(
#       name="trybuilder1",
#       workernames=['worker1'],
#       factory=tryfactory))

####### BUILDBOT SERVICES

# authz_cfg=authz.Authz(
#     gracefulShutdown = False,
#     forceBuild = False,
#     forceAllBuilds = False,
#     pingBuilder = False,
#     stopBuild = False,
#     stopAllBuilds = False,
#     cancelPendingBuild = False,
# )

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

# @util.renderer
# @defer.inlineCallbacks
# def getresults(props):
#     all_logs=[]
#     master = props.master
#     steps = yield props.master.data.get(
#         ('builders', props.getProperty('buildername'), 'builds',
#         props.getProperty('buildnumber'), 'steps'))
#     for step in steps:
#         if step['results'] == util.Results.index('failure'):
#             logs = yield master.data.get(("steps", step['stepid'], 'logs'))
#             for l in logs:
#                 all_logs.append('Step : {0} Result : {1}'.format(
#                                     step['name'], util.Results[step['results']]))
#                 all_logs.append('```')
#                 l['stepname'] = step['name']
#                 l['content'] = yield master.data.get(("logs", l['logid'], 'contents'))
#                 step_logs = l['content']['content'].split('\n')
#                 include = False
#                 for i, sl in enumerate(step_logs):
#                     all_logs.append(sl[1:])
#                 all_logs.append('```')
#     return '\n'.join(all_logs)

# generator = BuildStatusGenerator(message_formatter=MessageFormatterRenderable(getresults))

# # "build" parameter is of this type:
# # http://docs.buildbot.net/current/developer/raml/build.html#rtype-build
# def formatter(build):
#     print('foobar')

# # http://docs.buildbot.net/latest/manual/configuration/reporters/http_status.html#buildbot.reporters.HttpStatusPush
# c['services'].append(reporters.HttpStatusPush(
#     serverUrl="http://example.com/submit",
#     generators=[generator], # A list of report generators that will be used to generate reports to be sent by this reporter. Currently the reporter will consider only the report generated by the first generator.
#     debug=True, # logs every requests and their response
#     verify=False, # disable ssl verification for the case you use temporary self signed certificates
#     #
#     format_fn=formatter,
# ))

# # When a try build on the 'trybuilder' finishes let's author a
# # comment on the pull request it originates from.
# # http://docs.buildbot.net/latest/manual/configuration/reporters/github_comment.html#githubcommentpush
# # TODO(kwk): With custom build report generator one might be able to update comments?
# # TODO(kwk): With custom build report generator one might be able to author comments when the build was kicked off?

# c['services'].append(GitHubCommentPush(
#                 token=github_pat_write_discussion,
#                 generators=[generator],
#                 verbose=True, # logs a message for each successful status push
#                 debug=True, # logs every requests and their response
#                 verify=False, # disable ssl verification for the case you use temporary self signed certificates
# ))

# @util.renderer
# @defer.inlineCallbacks
# def getresults(props):
#     all_logs=[]
#     master = props.master
#     steps = yield props.master.data.get(
#         ('builders', props.getProperty('buildername'), 'builds',
#         props.getProperty('buildnumber'), 'steps'))
#     for step in steps:
#         if step['results'] == util.Results.index('failure'):
#             logs = yield master.data.get(("steps", step['stepid'], 'logs'))
#             for l in logs:
#                 all_logs.append('Step : {0} Result : {1}'.format(
#                                     step['name'], util.Results[step['results']]))
#                 all_logs.append('```')
#                 l['stepname'] = step['name']
#                 l['content'] = yield master.data.get(("logs", l['logid'], 'contents'))
#                 step_logs = l['content']['content'].split('\n')
#                 include = False
#                 for i, sl in enumerate(step_logs):
#                     all_logs.append(sl[1:])
#                 all_logs.append('```')
#     return '\n'.join(all_logs)

# c['services'].append(reporters.GitHubCommentPush(
#                 # token=util.Secret("github-pat"),
#                 token=github_pat_write_discussion,
#                 startDescription='Build started.',
#                 endDescription='Build done.',
#                 verbose=True, # logs a message for each successful status push
#                 debug=True, # logs every requests and their response
#                 verify=False, # disable ssl verification for the case you use temporary self signed certificates
#                 builders=['trybuilder0', 'trybuilder1'],
#                 context=Interpolate('buildbot/%(prop:buildername)s')))

# # https://docs.buildbot.net/latest/manual/configuration/reporters/github_status.html#githubstatuspush
# c['services'].append(reporters.GitHubStatusPush(
#                                 # token=util.Secret("github-pat"),
#                                 token=github_pat_write_discussion,
#                                 context=util.Interpolate("buildbot/%(prop:buildername)s"),
#                                 startDescription='Build started.',
#                                 endDescription='Build done.',
#                                 verbose=True,
#                                 builders=['trybuilder0', 'trybuilder1']))

# Serve Prometheus metrics under http://localhost:9101/metrics.
# # https://github.com/claws/buildbot-prometheus
# c['services'].append(reporters.Prometheus(port=9101))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = os.environ.get('BUILDBOT_MASTER_TITLE', "Untitled")
c['titleURL'] = "https://github.com/kwk/llvm-ci/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

www_port = int(os.environ.get('BUILDBOT_WWW_PORT', 8010))
c['buildbotURL'] = os.environ.get('BUILDBOT_WWW_URL', "http://localhost:"+str(www_port)+"/")

# minimalistic config to activate new web UI
c['www'] = {
    'port': www_port,
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
        'grid_view': True,
    },
    'ui_default_config': { 
        'Waterfall.number_background_waterfall': True,
        'Waterfall.show_builders_without_builds': True,
        'Grid.fullChanges': True,
        'Grid.leftToRight': True,
        'Builders.show_workers_name': True,
    }
    # ,'auth': util.UserPasswordAuth([
    #     ("alice", "alice"),
    #     ("bob", "bob"),
    #     ("admin", "admin"),
    #     ("root", "root"),
    # ]),
    # 'authz': util.Authz(
    #     stringsMatcher=util.fnmatchStrMatcher,  # simple matcher with '*' glob character
    #     # stringsMatcher = util.reStrMatcher,   # if you prefer regular expressions
    #     allowRules=[
    #         # admins can do anything,
    #         # defaultDeny=False: if user does not have the admin role, we continue parsing rules
    #         util.AnyEndpointMatcher(role="admins", defaultDeny=False),
            
    #         util.StopBuildEndpointMatcher(role="owner"),

    #         # *-try groups can start "try" builds
    #         util.ForceBuildEndpointMatcher(builder="trybuilder", role="*-try"),
    #         # *-mergers groups can start "merge" builds
    #         util.ForceBuildEndpointMatcher(builder="merge", role="*-mergers"),
    #         # *-releasers groups can start "release" builds
    #         util.ForceBuildEndpointMatcher(builder="release", role="*-releasers"),
    #         # if future Buildbot implement new control, we are safe with this last rule
    #         util.AnyControlEndpointMatcher(role="admins")
    #     ],
    #     roleMatchers=[
    #         util.RolesFromUsername(roles=["admins", "admins-try"], usernames=["admin", "root"]),
    #         util.RolesFromUsername(roles=["developers", "integrators"], usernames=["alice", "bob"]),
    #         util.RolesFromUsername(roles=["developers-try"], usernames=["alice"]),
    #     ]
    # )
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}

####### Input Validation

# This option configures the validation applied to user inputs of various types.
# This validation is important since these values are often included in command-line
# arguments executed on workers. Allowing arbitrary input from untrusted users may raise
# security concerns.
# http://docs.buildbot.net/latest/manual/configuration/global.html#input-validation

c['validation'] = {
    'branch' : re.compile(r'^[\w.+/~-]*$'),
    'revision' : re.compile(r'^[ \w\.\-\/]*$'),
    'property_name' : re.compile(r'^[\w\.\-\/\~:]*$'),
    'property_value' : re.compile(r'^[\w\.\-\/\~:]*$'),
}
